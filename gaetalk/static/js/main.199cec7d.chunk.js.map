{"version":3,"sources":["firebase.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","Rooms","rooms","selectedRoom","setRooms","setSelectedRoom","renderedRooms","map","room","className","undefined","onClick","id","codeOf","char","charCodeAt","isCharInRange","rangeStart","rangeEnd","code","validateUserId","userId","length","validateChar","validateContent","includes","Messages","useState","events","setEvents","setUserId","messageText","setMessageText","newEventsRef","useRef","counterRef","counter","setCounter","eventsElementRef","messageTextInputElementRef","sendMessageButtonElementRef","eventsPath","showCreatedAt","setShowCreatedAt","useEffect","storedUserId","localStorage","getItem","e","unsubscribe","collection","orderBy","limitToLast","onSnapshot","querySnapshot","docChanges","forEach","change","type","doc","data","createdAt","event","current","push","renderedEvents","rendered","renderedCreatedAt","moment","toDate","format","sendingMessage","tailing","setTailing","useLayoutEffect","eventsDiv","scrollTop","scrollHeight","clientHeight","validUserId","name","checked","onChange","target","style","verticalAlign","ref","onScroll","value","setItem","placeholder","maxLength","autoComplete","onKeyUp","key","click","alert","trim","window","messageType","FieldValue","serverTimestamp","set","then","focus","catch","reason","MessagesPanel","App","get","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.199cec7d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/analytics';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC17JfGlIYgic4alZQwJQ3w0d0DWEYNscY\",\n  authDomain: \"gaetalk-dc0e6.firebaseapp.com\",\n  projectId: \"gaetalk-dc0e6\",\n  storageBucket: \"gaetalk-dc0e6.appspot.com\",\n  messagingSenderId: \"578915040528\",\n  appId: \"1:578915040528:web:e1a25643f31ef150a7f995\",\n  measurementId: \"G-F341D86F1Y\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;","import React, {useEffect, useLayoutEffect, useRef, useState} from 'react';\nimport moment from 'moment';\n\nimport firebase from './firebase';\n\nimport './App.css';\n\nconst db = firebase.firestore();\n\nconst Rooms: React.FunctionComponent<any> = ({rooms, setRooms, selectedRoom, setSelectedRoom}) => {\n  const renderedRooms = rooms.map((room: any) => {\n    const handleRoomClick = () => {\n      setSelectedRoom(room);\n    };\n\n    return (\n        <div key={room.id}>\n          <button\n              className={room === selectedRoom ? 'selected-room' : undefined}\n              onClick={handleRoomClick}\n          >\n            {room.id}\n          </button>\n        </div>\n    );\n  });\n\n  return (\n    <div id=\"rooms\">\n      <h3>대화방</h3>\n      <div>\n        {renderedRooms}\n      </div>\n    </div>\n  );\n};\n\nconst codeOf = (char: string) => {\n  return char.charCodeAt(0);\n};\n\nconst isCharInRange = (char: string, rangeStart: string, rangeEnd: string) => {\n  const code = codeOf(char);\n  return codeOf(rangeStart) <= code && code <= codeOf(rangeEnd);\n};\n\nconst validateUserId = (userId: string) => {\n  if (!userId) {\n    throw '유저 Id가 없습니다.';\n  }\n\n  if (userId.length > 16) {\n    throw '유저 Id가 너무 깁니다. 16자 이하로 해주세요.';\n  }\n\n  const validateChar = (char: string) => {\n    return isCharInRange(char, '0', '9')\n        || isCharInRange(char, 'A', 'Z')\n        || isCharInRange(char, 'a', 'z')\n        || isCharInRange(char, '\\uAC00', '\\uD7AF')\n        || isCharInRange(char, '\\u1100', '\\u11FF')\n        || isCharInRange(char, '\\uA960', '\\uA97C')\n        || isCharInRange(char, '\\uD7B0', '\\uD7C6')\n        || isCharInRange(char, '\\uD7CB', '\\uD7FB')\n        || isCharInRange(char, '\\u3131', '\\u3163')\n        || isCharInRange(char, '\\u3165', '\\u318E')\n        || isCharInRange(char, '\\u3041', '\\u309f') // Hiragana\n        || isCharInRange(char, '\\u30a0', '\\u30ff') // Katakana\n        || isCharInRange(char, '\\u4e00', '\\u9fff') // CJK Unified Ideographs\n        || isCharInRange(char, '\\u3400', '\\u4dbf') // CJK Unified Ideographs Extension A\n        || char === '.' || char === '-' || char === '_';\n  }\n\n  const validateContent = (userId: string) => {\n    for (const char of userId) {\n      if (!validateChar(char)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  if (!validateContent(userId)) {\n    throw '유저 Id에 허용되지 않는 문자가 포함되어 있습니다.';\n  }\n\n  if (userId.includes('gaejotbab') || userId.includes('개좆밥')) {\n    throw '사용이 불가능한 유저 Id입니다.';\n  }\n};\n\nconst Messages: React.FunctionComponent<any> = ({selectedRoom}) => {\n  const [events, setEvents] = useState<any[]>([]);\n\n  const [userId, setUserId] = useState<string>('');\n  const [messageText, setMessageText] = useState<string>('');\n\n  const newEventsRef = useRef<any[]>([]);\n  const counterRef = useRef(0);\n  const [counter, setCounter] = useState(0);\n\n  const eventsElementRef = useRef<HTMLDivElement>(null);\n  const messageTextInputElementRef = useRef<HTMLInputElement>(null);\n  const sendMessageButtonElementRef = useRef<HTMLButtonElement>(null);\n\n  const eventsPath = `rooms/${selectedRoom.id}/events`;\n\n  const [showCreatedAt, setShowCreatedAt] = useState<boolean>(true);\n\n  useEffect(() => {\n    try {\n      const storedUserId = localStorage.getItem('userId');\n      if (storedUserId === null) {\n        return;\n      }\n      setUserId(storedUserId);\n    } catch (e) {\n      // Ignore\n    }\n  }, []);\n\n  useEffect(() => {\n    const unsubscribe = db.collection(eventsPath)\n        .orderBy('createdAt')\n        .limitToLast(50)\n        .onSnapshot(querySnapshot => {\n      querySnapshot.docChanges().forEach((change) => {\n        if ((change.type === 'added' && change.doc.data().createdAt) || change.type === 'modified') {\n          // XXX\n          const event = {...change.doc.data(), id: change.doc.id};\n          newEventsRef.current.push(event);\n          ++counterRef.current;\n          setCounter(counterRef.current);\n        }\n      });\n    });\n\n    const unsubscribeAndClearEvents = () => {\n      unsubscribe();\n      setEvents([]);\n    };\n\n    return unsubscribeAndClearEvents;\n  }, [selectedRoom, eventsPath]);\n\n  useEffect(() => {\n    if (newEventsRef.current.length === 0) {\n      return;\n    }\n    setEvents([...events, ...newEventsRef.current]);\n    newEventsRef.current = [];\n  }, [counter, events]);\n\n  const renderedEvents = events.map(event => {\n    let renderedCreatedAt = null;\n\n    if (showCreatedAt) {\n      const createdAt = moment(event.createdAt.toDate())\n          .format('YYYY-MM-DD HH:mm:ss');\n      renderedCreatedAt = <span>[{createdAt}]</span>;\n    }\n\n    let rendered;\n    switch (event.type) {\n      case 'userEntered':\n        rendered = <p key={event.id}>{renderedCreatedAt} <strong>{event.userId}</strong> 님이 입장하셨습니다.</p>;\n        break;\n      case 'message':\n        rendered = <p key={event.id}>{renderedCreatedAt} <strong>{event.userId}</strong>: {event.messageText}</p>;\n        break;\n      default:\n        break;\n    }\n    return rendered;\n  });\n\n  const sendingMessage = useRef(false);\n\n  const sendMessage = () => {\n    if (sendingMessage.current) {\n      return;\n    }\n\n    sendingMessage.current = true;\n\n    try {\n      validateUserId(userId);\n    } catch (e) {\n      alert(e);\n      sendingMessage.current = false;\n      return;\n    }\n\n    if (!messageText) {\n      sendingMessage.current = false;\n      return;\n    }\n\n    if (!messageText.trim()) {\n      sendingMessage.current = false;\n      return;\n    }\n\n    if (messageText.length > 1024) {\n      window.alert('메시지가 너무 깁니다.');\n      sendingMessage.current = false;\n      return;\n    }\n\n    let event;\n    try {\n      event = {\n        userId: userId,\n        type: 'message',\n        messageType: 'text',\n        messageText: messageText,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      };\n    } catch (e) {\n      sendingMessage.current = false;\n      return;\n    }\n\n    db.collection(eventsPath).doc().set(event).then(value => {\n      messageTextInputElementRef.current?.focus();\n      setMessageText('');\n      sendingMessage.current = false;\n    }).catch(reason => {\n      sendingMessage.current = false;\n    });\n  };\n\n  const handleMessageTextEnter = (event: any) => {\n    if (event.key === 'Enter') {\n      sendMessageButtonElementRef.current?.click();\n    }\n  };\n\n  const [tailing, setTailing] = useState(true);\n\n  useLayoutEffect(() => {\n    const eventsDiv = eventsElementRef.current;\n    if (eventsDiv == null) {\n      return;\n    }\n\n    if (tailing) {\n      eventsDiv.scrollTop = eventsDiv.scrollHeight - eventsDiv.clientHeight;\n    }\n  });\n\n  const handleScrollEvents = (event: React.UIEvent) => {\n    const eventsDiv = eventsElementRef.current;\n    if (eventsDiv == null) {\n      return;\n    }\n\n    setTailing(eventsDiv.scrollHeight - eventsDiv.clientHeight - 5 <= eventsDiv.scrollTop);\n  };\n\n  const handleShowCreatedAtChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target == null) {\n      return;\n    }\n    setShowCreatedAt(event.target.checked);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const userId = event.target.value;\n    setUserId(userId);\n    try {\n      localStorage.setItem('userId', userId);\n    } catch (e) {\n      // Ignore\n    }\n  };\n\n  let validUserId = false;\n  try {\n    validateUserId(userId);\n    validUserId = true;\n  } catch (e) {\n    // Ignore\n  }\n\n  return (\n      <div id=\"messages\">\n        <div id=\"messages-header\">\n          <h3>대화 ({selectedRoom.id})</h3>\n          <div id=\"messages-control-panel\">\n            <label>\n              <input\n                  type=\"checkbox\"\n                  name=\"showCreatedAt\"\n                  checked={showCreatedAt}\n                  onChange={handleShowCreatedAtChange}\n                  style={{verticalAlign: 'baseline'}}\n              />\n              시간 보기\n            </label>\n          </div>\n        </div>\n        <div id=\"events\" ref={eventsElementRef} onScroll={handleScrollEvents}>\n          {renderedEvents}\n        </div>\n        <div className=\"send-window\">\n          <input\n              id=\"user-id\"\n              className={!userId || validUserId ? undefined : 'user-id-invalid'}\n              type=\"text\"\n              name=\"userId\"\n              value={userId}\n              onChange={handleUserIdChange}\n              placeholder=\"유저 Id\"\n              maxLength={16}\n              autoComplete=\"off\"\n          />\n          <input\n              ref={messageTextInputElementRef}\n              id=\"message-text\"\n              className=\"message-text\"\n              type=\"text\"\n              name=\"messageText\"\n              value={messageText}\n              onChange={event => {setMessageText(event.target.value)}}\n              onKeyUp={handleMessageTextEnter}\n              placeholder=\"메시지\"\n              maxLength={1024}\n              autoComplete=\"off\"\n          />\n          <button\n              ref={sendMessageButtonElementRef}\n              id=\"send-message-button\"\n              onClick={sendMessage}\n          >\n            보내기\n          </button>\n        </div>\n      </div>\n  );\n};\n\nconst MessagesPanel: React.FunctionComponent<any> = ({selectedRoom}) => {\n  if (selectedRoom) {\n    return (\n        <Messages selectedRoom={selectedRoom} />\n    );\n  } else {\n    return (\n        <div id=\"messages-with-no-selected-room\">\n          <div>방을 선택하세요.</div>\n        </div>\n    );\n  }\n};\n\nfunction App() {\n  const [rooms, setRooms] = useState<any[]>([]);\n  const [selectedRoom, setSelectedRoom] = useState<any>(null);\n\n  useEffect(() => {\n    db.collection('rooms').get().then(querySnapshot => {\n      const rooms: any[] = [];\n      querySnapshot.forEach(doc => {\n        const room = {\n          id: doc.id,\n        };\n        rooms.push(room);\n      });\n      setRooms(rooms);\n    });\n  }, []);\n\n  return (\n    <div id=\"app\">\n      <div id=\"header\">\n        <h2>개톡</h2>\n      </div>\n      <Rooms\n          rooms={rooms}\n          setRooms={setRooms}\n          selectedRoom={selectedRoom}\n          setSelectedRoom={setSelectedRoom}\n      />\n      <MessagesPanel selectedRoom={selectedRoom} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}