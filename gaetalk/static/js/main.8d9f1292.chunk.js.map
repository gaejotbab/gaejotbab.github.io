{"version":3,"sources":["firebase.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","Rooms","rooms","selectedRoom","setRooms","setSelectedRoom","renderedRooms","map","room","className","undefined","onClick","id","Messages","useState","events","setEvents","userId","setUserId","messageText","setMessageText","newEventsRef","useRef","counterRef","counter","setCounter","eventsElementRef","messageTextInputElementRef","eventsPath","useEffect","collection","orderBy","onSnapshot","querySnapshot","docChanges","forEach","change","type","event","doc","data","current","push","console","log","length","renderedEvents","rendered","tailing","setTailing","useLayoutEffect","eventsDiv","scrollTop","scrollHeight","clientHeight","ref","onScroll","name","value","onChange","target","placeholder","maxLength","onKeyUp","keyCode","preventDefault","document","getElementById","click","window","alert","codeOf","char","charCodeAt","isCharInRange","rangeStart","rangeEnd","code","validateUserIdChar","validateUserId","includes","messageType","createdAt","Date","set","then","focus","App","renderedMessages","get","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8d9f1292.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/analytics';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC17JfGlIYgic4alZQwJQ3w0d0DWEYNscY\",\n  authDomain: \"gaetalk-dc0e6.firebaseapp.com\",\n  projectId: \"gaetalk-dc0e6\",\n  storageBucket: \"gaetalk-dc0e6.appspot.com\",\n  messagingSenderId: \"578915040528\",\n  appId: \"1:578915040528:web:e1a25643f31ef150a7f995\",\n  measurementId: \"G-F341D86F1Y\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;","import React, {useEffect, useLayoutEffect, useRef, useState} from 'react';\n\nimport firebase from './firebase';\n\nimport './App.css';\n\nconst db = firebase.firestore();\n\nconst Rooms: React.FunctionComponent<any> = ({rooms, setRooms, selectedRoom, setSelectedRoom}) => {\n  const renderedRooms = rooms.map((room: any) => {\n    const handleRoomClick = () => {\n      setSelectedRoom(room);\n    };\n\n    return (\n        <div key={room.id}>\n          <button\n              className={room === selectedRoom ? 'selected-room' : undefined}\n              onClick={handleRoomClick}\n          >\n            {room.id}\n          </button>\n        </div>\n    );\n  });\n\n  return (\n    <div id=\"rooms\">\n      <h2>대화방</h2>\n      <div>\n        {renderedRooms}\n      </div>\n    </div>\n  );\n};\n\nconst Messages: React.FunctionComponent<any> = ({selectedRoom}) => {\n  const [events, setEvents] = useState<any[]>([]);\n\n  const [userId, setUserId] = useState<string>('');\n  const [messageText, setMessageText] = useState<string>('');\n\n  const newEventsRef = useRef<any[]>([]);\n  const counterRef = useRef(0);\n  const [counter, setCounter] = useState(0);\n\n  const eventsElementRef = useRef<HTMLDivElement>(null);\n  const messageTextInputElementRef = useRef<HTMLInputElement>(null);\n\n  const eventsPath = `rooms/${selectedRoom.id}/events`;\n\n  useEffect(() => {\n    const unsubscribe = db.collection(eventsPath).orderBy('createdAt').onSnapshot(querySnapshot => {\n      querySnapshot.docChanges().forEach((change) => {\n        if (change.type === 'added') {\n          // XXX\n          const event = {...change.doc.data(), id: change.doc.id};\n          newEventsRef.current.push(event);\n          ++counterRef.current;\n          setCounter(counterRef.current);\n          console.log(event);\n        }\n      });\n    });\n\n    return unsubscribe;\n  }, [selectedRoom, eventsPath]);\n\n  useEffect(() => {\n    if (newEventsRef.current.length === 0) {\n      return;\n    }\n    setEvents([...events, ...newEventsRef.current]);\n    newEventsRef.current = [];\n  }, [counter, events]);\n\n  const renderedEvents = events.map(event => {\n    let rendered;\n    switch (event.type) {\n      case 'userEntered':\n        rendered = <p key={event.id}><strong>{event.userId}</strong> 님이 입장하셨습니다.</p>;\n        break;\n      case 'message':\n        rendered = <p key={event.id}><strong>{event.userId}</strong>: {event.messageText}</p>;\n        break;\n      default:\n        break;\n    }\n    return rendered;\n  });\n\n  const sendMessage = () => {\n    if (!userId) {\n      window.alert('유저 Id가 없습니다.');\n      return;\n    }\n\n    if (userId.length > 16) {\n      window.alert('유저 Id가 너무 깁니다. 16자 이하로 해주세요.');\n      return;\n    }\n\n    const codeOf = (char: string) => {\n      return char.charCodeAt(0);\n    };\n\n    const isCharInRange = (char: string, rangeStart: string, rangeEnd: string) => {\n      const code = codeOf(char);\n      return codeOf(rangeStart) <= code && code <= codeOf(rangeEnd);\n    };\n\n    const validateUserIdChar = (char: string) => {\n      return isCharInRange(char, '0', '9')\n          || isCharInRange(char, 'A', 'Z')\n          || isCharInRange(char, 'a', 'z')\n          || isCharInRange(char, '\\uAC00', '\\uD7AF')\n          || isCharInRange(char, '\\u1100', '\\u11FF')\n          || isCharInRange(char, '\\uA960', '\\uA97C')\n          || isCharInRange(char, '\\uD7B0', '\\uD7C6')\n          || isCharInRange(char, '\\uD7CB', '\\uD7FB')\n          || isCharInRange(char, '\\u3131', '\\u3163')\n          || isCharInRange(char, '\\u3165', '\\u318E')\n          || char === '.' || char === '-' || char === '_';\n    }\n\n    const validateUserId = (userId: string) => {\n      for (const char of userId) {\n        if (!validateUserIdChar(char)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    if (!validateUserId(userId)) {\n      window.alert('유저 Id에 허용되지 않는 문자가 포함되어 있습니다.');\n      return;\n    }\n\n    if (userId.includes('gaejotbab') || userId.includes('개좆밥')) {\n      window.alert('사용이 불가능한 유저 Id입니다.');\n      return;\n    }\n\n    if (!messageText) {\n      return;\n    }\n\n    const event = {\n      userId: userId,\n      type: 'message',\n      messageType: 'text',\n      messageText: messageText,\n      createdAt: new Date(),\n    };\n\n    db.collection(eventsPath).doc().set(event).then(value => {\n      messageTextInputElementRef.current?.focus();\n      setMessageText('');\n    });\n  };\n\n  const handleMessageTextEnter = (event: any) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      document.getElementById('send-message-button')?.click();\n    }\n  };\n\n  const [tailing, setTailing] = useState(false);\n\n  useLayoutEffect(() => {\n    const eventsDiv = eventsElementRef.current;\n    if (eventsDiv == null) {\n      return;\n    }\n\n    if (tailing) {\n      eventsDiv.scrollTop = eventsDiv.scrollHeight - eventsDiv.clientHeight;\n    }\n  });\n\n  const handleScrollEvents = (event: React.UIEvent) => {\n    const eventsDiv = eventsElementRef.current;\n    if (eventsDiv == null) {\n      return;\n    }\n\n    setTailing(eventsDiv.scrollHeight - eventsDiv.clientHeight - 5 <= eventsDiv.scrollTop);\n  };\n\n  return (\n      <div id=\"messages\">\n        <h2>대화 ({selectedRoom.id})</h2>\n        <div id=\"events\" ref={eventsElementRef} onScroll={handleScrollEvents}>\n          {renderedEvents}\n        </div>\n        <div className=\"send-window\">\n          <input\n              className=\"user-id\"\n              type=\"text\"\n              name=\"userId\"\n              value={userId}\n              onChange={event => {setUserId(event.target.value)}}\n              placeholder=\"유저 Id\"\n              maxLength={16}\n          />\n          <input\n              ref={messageTextInputElementRef}\n              id=\"message-text\"\n              className=\"message-text\"\n              type=\"text\"\n              name=\"messageText\"\n              value={messageText}\n              onChange={event => {setMessageText(event.target.value)}}\n              onKeyUp={handleMessageTextEnter}\n              placeholder=\"메시지\"\n              maxLength={1024}\n          />\n          <button id=\"send-message-button\" onClick={sendMessage}>보내기</button>\n        </div>\n      </div>\n  );\n};\n\nfunction App() {\n  const [rooms, setRooms] = useState<any[]>([]);\n  const [selectedRoom, setSelectedRoom] = useState<any>(null);\n\n  useEffect(() => {\n    db.collection('rooms').get().then(querySnapshot => {\n      const rooms: any[] = [];\n      querySnapshot.forEach(doc => {\n        const room = {\n          id: doc.id,\n        };\n        rooms.push(room);\n      });\n      setRooms(rooms);\n    });\n  }, []);\n\n  let renderedMessages;\n  if (selectedRoom) {\n    renderedMessages = (\n        <Messages\n            selectedRoom={selectedRoom}\n        />\n    );\n  } else {\n    renderedMessages = (\n        <div id=\"messages-with-no-selected-room\">\n          <div>방을 선택하세요.</div>\n        </div>\n    );\n  }\n\n  return (\n    <div id=\"app\">\n      <div id=\"header\">\n        <h1>개톡</h1>\n      </div>\n      <Rooms\n          rooms={rooms}\n          setRooms={setRooms}\n          selectedRoom={selectedRoom}\n          setSelectedRoom={setSelectedRoom}\n      />\n      {renderedMessages}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}